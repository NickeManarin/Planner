// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Planner.Data;

namespace Planner.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Planner.Model.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("SuggestedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SuggestedValueWithDrinks")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DueTo = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aniversário",
                            SuggestedValue = 10m,
                            SuggestedValueWithDrinks = 20m
                        },
                        new
                        {
                            Id = 2L,
                            DueTo = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Final de Ano",
                            SuggestedValue = 50m,
                            SuggestedValueWithDrinks = 60m
                        },
                        new
                        {
                            Id = 3L,
                            DueTo = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SuggestedValue = 10m,
                            SuggestedValueWithDrinks = 15m
                        });
                });

            modelBuilder.Entity("Planner.Model.Participation", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AddedIn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Contribution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Participations");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 2L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 3L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 4L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 10m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 5L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 6L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = true
                        },
                        new
                        {
                            UserId = 7L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 10m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 8L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 9L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 10L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 11L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 12L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 13L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = true
                        },
                        new
                        {
                            UserId = 14L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 15L,
                            EventId = 1L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 1L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 50m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 2L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 60m,
                            HasPaid = false,
                            Observation = "Vai organizar o sistema de som."
                        },
                        new
                        {
                            UserId = 4L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 50m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 5L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 50m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 7L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 60m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 9L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 60m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 10L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 60m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 11L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 50m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 13L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 50m,
                            HasPaid = true
                        },
                        new
                        {
                            UserId = 15L,
                            EventId = 2L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false,
                            Observation = "Só vai ficar um pouco."
                        },
                        new
                        {
                            UserId = 10L,
                            EventId = 3L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 10m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 11L,
                            EventId = 3L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 10m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 12L,
                            EventId = 3L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 20m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 13L,
                            EventId = 3L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 15m,
                            HasPaid = true
                        },
                        new
                        {
                            UserId = 14L,
                            EventId = 3L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 15m,
                            HasPaid = false
                        },
                        new
                        {
                            UserId = 15L,
                            EventId = 3L,
                            AddedIn = new DateTime(2020, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contribution = 30m,
                            HasPaid = false,
                            Observation = "Vai trazer outra pessoa, vai pagar em dobro."
                        });
                });

            modelBuilder.Entity("Planner.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeactivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("PasswordLastUpdatedUtc")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WasDeactivated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "alice@exemplo.com",
                            Name = "Alice",
                            PasswordHash = new byte[] { 11, 156, 96, 54, 0, 1, 210, 5, 24, 39, 108, 176, 4, 215, 97, 74, 111, 202, 174, 18, 184, 180, 2, 225, 38, 1, 69, 56, 31, 214, 71, 248, 220, 181, 82, 141, 142, 163, 216, 41, 2, 101, 137, 230, 150, 184, 135, 189, 210, 208, 1, 94, 69, 108, 60, 179, 101, 209, 188, 155, 138, 19, 36, 170 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(586),
                            PasswordSalt = new byte[] { 15, 150, 84, 200, 70, 224, 2, 183, 152, 231, 53, 80, 181, 158, 31, 53, 116, 155, 175, 18, 35, 102, 124, 157, 77, 155, 209, 193, 84, 129, 130, 16, 45, 206, 6, 142, 110, 109, 10, 137, 114, 5, 84, 3, 78, 130, 13, 118, 80, 82, 142, 3, 83, 7, 46, 254, 19, 40, 136, 157, 136, 117, 147, 254, 219, 50, 54, 144, 233, 236, 35, 170, 86, 212, 253, 137, 106, 242, 43, 109, 88, 38, 50, 146, 12, 80, 237, 158, 152, 231, 11, 18, 136, 228, 91, 46, 167, 71, 191, 171, 118, 69, 177, 229, 147, 228, 205, 216, 237, 48, 141, 135, 0, 180, 130, 43, 188, 191, 165, 252, 150, 128, 80, 55, 92, 69, 11, 94 },
                            Role = "Admin",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 2L,
                            Email = "beto@exemplo.com",
                            Name = "Beto",
                            PasswordHash = new byte[] { 15, 24, 89, 153, 130, 195, 220, 237, 48, 221, 75, 165, 78, 60, 214, 32, 190, 225, 159, 108, 150, 131, 73, 54, 126, 96, 116, 189, 180, 74, 145, 77, 68, 178, 0, 251, 101, 219, 97, 102, 124, 35, 125, 38, 245, 90, 78, 25, 60, 205, 60, 77, 180, 26, 125, 230, 119, 17, 177, 9, 195, 114, 132, 211 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2044),
                            PasswordSalt = new byte[] { 52, 16, 234, 66, 63, 211, 34, 73, 124, 20, 231, 23, 195, 49, 83, 1, 206, 244, 20, 164, 113, 248, 14, 25, 191, 165, 161, 97, 22, 125, 64, 15, 202, 21, 242, 215, 101, 90, 238, 224, 1, 184, 44, 8, 109, 75, 24, 250, 143, 232, 199, 89, 30, 253, 61, 53, 130, 191, 65, 203, 57, 244, 11, 220, 233, 98, 182, 150, 41, 177, 123, 192, 19, 78, 164, 150, 231, 142, 114, 118, 16, 60, 239, 146, 65, 104, 144, 102, 31, 226, 2, 185, 72, 134, 15, 9, 13, 173, 81, 76, 32, 153, 183, 225, 139, 180, 118, 65, 88, 103, 28, 213, 9, 129, 164, 103, 96, 226, 65, 161, 97, 37, 68, 218, 92, 110, 120, 138 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 3L,
                            Email = "diego.b@exemplo.com",
                            Name = "Diego B.",
                            PasswordHash = new byte[] { 175, 102, 34, 107, 45, 135, 242, 119, 40, 163, 198, 74, 52, 218, 142, 229, 11, 18, 84, 195, 130, 225, 209, 153, 57, 94, 86, 32, 218, 144, 124, 132, 121, 150, 199, 63, 163, 89, 254, 230, 4, 97, 188, 210, 67, 69, 148, 228, 220, 121, 49, 89, 57, 162, 22, 179, 186, 233, 155, 204, 153, 233, 57, 195 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2173),
                            PasswordSalt = new byte[] { 202, 133, 211, 38, 110, 230, 131, 57, 184, 173, 30, 117, 84, 151, 188, 122, 158, 3, 112, 48, 234, 49, 32, 119, 168, 155, 159, 144, 43, 120, 178, 240, 112, 133, 55, 60, 155, 40, 60, 225, 63, 37, 4, 245, 213, 155, 56, 149, 61, 49, 36, 17, 51, 90, 95, 24, 194, 97, 32, 105, 248, 42, 43, 207, 157, 91, 40, 45, 71, 181, 71, 44, 192, 4, 193, 98, 176, 207, 163, 28, 102, 119, 111, 42, 56, 237, 97, 203, 231, 233, 22, 122, 139, 106, 220, 159, 192, 183, 109, 119, 192, 122, 70, 151, 96, 39, 192, 31, 106, 23, 146, 191, 72, 135, 133, 232, 106, 95, 117, 159, 4, 143, 92, 138, 12, 83, 244, 214 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 4L,
                            Email = "diego.p@exemplo.com",
                            Name = "Diego P.",
                            PasswordHash = new byte[] { 193, 45, 181, 187, 42, 10, 150, 183, 27, 151, 100, 36, 239, 151, 154, 25, 86, 213, 155, 105, 8, 182, 112, 51, 158, 61, 248, 254, 124, 132, 62, 200, 223, 25, 238, 174, 26, 34, 146, 223, 167, 57, 188, 199, 97, 211, 35, 181, 137, 220, 58, 166, 97, 189, 206, 57, 171, 52, 196, 1, 229, 201, 73, 7 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2205),
                            PasswordSalt = new byte[] { 68, 20, 145, 94, 246, 162, 225, 60, 37, 50, 217, 247, 233, 77, 55, 28, 34, 39, 139, 30, 161, 170, 188, 25, 53, 76, 204, 222, 233, 12, 29, 13, 48, 39, 140, 118, 126, 202, 230, 81, 130, 150, 46, 178, 39, 155, 195, 243, 66, 209, 190, 126, 247, 95, 159, 205, 58, 150, 145, 106, 35, 25, 153, 29, 233, 252, 234, 46, 164, 235, 249, 34, 7, 205, 51, 127, 177, 70, 139, 58, 104, 164, 15, 57, 48, 198, 60, 202, 58, 174, 9, 94, 152, 151, 44, 91, 80, 226, 130, 193, 184, 140, 39, 209, 16, 134, 32, 253, 200, 116, 234, 228, 0, 67, 165, 164, 60, 232, 128, 197, 25, 176, 247, 217, 95, 42, 129, 254 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 5L,
                            Email = "fernando@exemplo.com",
                            Name = "Fernando",
                            PasswordHash = new byte[] { 205, 77, 126, 94, 6, 114, 123, 250, 47, 102, 167, 211, 63, 47, 220, 50, 180, 9, 222, 145, 235, 240, 83, 146, 171, 106, 140, 12, 117, 28, 99, 253, 198, 56, 239, 179, 10, 222, 243, 211, 94, 107, 145, 215, 60, 172, 109, 40, 51, 237, 132, 89, 75, 166, 123, 119, 235, 58, 106, 147, 161, 101, 69, 155 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2234),
                            PasswordSalt = new byte[] { 71, 198, 26, 113, 131, 85, 194, 182, 188, 225, 186, 236, 104, 71, 89, 60, 14, 91, 28, 210, 114, 133, 112, 230, 184, 100, 189, 61, 227, 120, 40, 70, 230, 15, 99, 47, 223, 250, 220, 248, 11, 46, 95, 97, 235, 230, 195, 39, 149, 94, 74, 220, 157, 119, 238, 121, 189, 135, 129, 160, 77, 31, 34, 190, 68, 27, 249, 177, 79, 21, 207, 40, 7, 171, 0, 4, 73, 80, 252, 9, 157, 236, 68, 154, 196, 188, 47, 5, 145, 120, 85, 66, 86, 20, 53, 89, 94, 250, 110, 47, 48, 8, 97, 179, 190, 108, 0, 170, 128, 124, 132, 91, 96, 134, 26, 191, 248, 39, 97, 37, 94, 95, 210, 89, 131, 203, 144, 38 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 6L,
                            Email = "gabriel@exemplo.com",
                            Name = "Gabriel",
                            PasswordHash = new byte[] { 181, 251, 186, 126, 201, 220, 75, 4, 122, 117, 175, 15, 61, 86, 169, 160, 164, 59, 91, 207, 163, 183, 113, 162, 63, 99, 168, 93, 235, 5, 11, 160, 82, 1, 159, 200, 230, 172, 220, 125, 79, 176, 248, 66, 199, 154, 54, 209, 187, 154, 161, 111, 110, 55, 93, 92, 222, 7, 122, 117, 77, 202, 25, 245 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2261),
                            PasswordSalt = new byte[] { 118, 119, 142, 70, 92, 163, 37, 26, 82, 219, 159, 119, 160, 104, 41, 91, 236, 26, 176, 16, 29, 87, 18, 57, 103, 172, 57, 150, 254, 56, 225, 152, 206, 83, 245, 108, 210, 24, 48, 24, 163, 215, 10, 226, 165, 34, 180, 67, 116, 75, 249, 68, 107, 20, 241, 235, 4, 8, 236, 239, 182, 112, 232, 26, 146, 196, 239, 17, 252, 221, 54, 12, 63, 78, 153, 173, 254, 10, 244, 44, 254, 76, 99, 3, 151, 218, 24, 134, 11, 229, 98, 102, 196, 5, 205, 38, 76, 56, 108, 28, 155, 39, 239, 92, 242, 7, 210, 85, 68, 250, 188, 32, 248, 152, 248, 144, 26, 180, 69, 119, 124, 162, 152, 134, 104, 183, 33, 165 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 7L,
                            Email = "leonardo@exemplo.com",
                            Name = "Leonardo",
                            PasswordHash = new byte[] { 242, 91, 158, 38, 10, 220, 238, 37, 45, 217, 177, 26, 91, 86, 242, 107, 248, 108, 47, 88, 244, 100, 89, 97, 143, 238, 229, 165, 110, 21, 239, 66, 152, 22, 213, 255, 4, 5, 20, 128, 168, 57, 160, 57, 26, 183, 25, 78, 123, 253, 126, 140, 231, 243, 77, 94, 244, 208, 180, 31, 74, 226, 142, 32 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2288),
                            PasswordSalt = new byte[] { 44, 15, 227, 4, 208, 217, 109, 160, 134, 245, 222, 114, 179, 152, 190, 240, 165, 22, 93, 75, 92, 80, 141, 203, 78, 189, 49, 208, 204, 228, 193, 214, 228, 94, 230, 36, 224, 230, 185, 1, 233, 136, 54, 231, 223, 29, 203, 221, 74, 108, 209, 55, 1, 63, 97, 223, 8, 90, 104, 37, 29, 101, 157, 186, 82, 230, 99, 51, 58, 80, 250, 0, 170, 75, 132, 206, 49, 37, 153, 84, 53, 104, 81, 37, 54, 153, 78, 131, 120, 131, 148, 78, 93, 233, 195, 99, 67, 41, 247, 114, 203, 47, 143, 42, 210, 15, 100, 236, 77, 99, 75, 232, 211, 9, 242, 53, 158, 251, 118, 83, 24, 71, 107, 107, 11, 85, 161, 228 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 8L,
                            Email = "marcus@exemplo.com",
                            Name = "Marcus J.",
                            PasswordHash = new byte[] { 36, 93, 33, 209, 64, 11, 38, 41, 216, 147, 48, 70, 67, 250, 88, 5, 102, 24, 86, 135, 177, 200, 67, 215, 4, 107, 120, 198, 16, 150, 1, 229, 239, 197, 206, 113, 249, 111, 12, 151, 239, 194, 170, 17, 194, 244, 222, 131, 99, 87, 62, 189, 106, 206, 194, 235, 16, 1, 62, 177, 148, 222, 199, 156 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2316),
                            PasswordSalt = new byte[] { 29, 251, 0, 59, 158, 112, 11, 193, 62, 180, 191, 159, 31, 135, 232, 14, 4, 123, 185, 43, 34, 104, 30, 223, 35, 122, 151, 39, 54, 3, 216, 150, 111, 40, 202, 215, 77, 83, 237, 241, 39, 156, 58, 219, 234, 40, 254, 209, 60, 195, 49, 1, 235, 114, 97, 186, 173, 25, 69, 79, 39, 150, 208, 247, 197, 118, 239, 170, 3, 250, 181, 47, 37, 82, 82, 158, 29, 172, 212, 122, 167, 22, 11, 231, 136, 68, 7, 33, 213, 197, 166, 124, 163, 43, 84, 202, 123, 209, 246, 47, 120, 175, 103, 130, 191, 62, 152, 122, 94, 205, 127, 150, 17, 206, 172, 139, 175, 247, 87, 57, 172, 91, 201, 152, 204, 221, 214, 49 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 9L,
                            Email = "michele@exemplo.com",
                            Name = "Michele",
                            PasswordHash = new byte[] { 58, 230, 170, 95, 63, 194, 187, 109, 17, 96, 44, 60, 19, 167, 177, 153, 126, 112, 225, 128, 126, 23, 12, 94, 69, 104, 216, 48, 44, 250, 214, 226, 238, 23, 119, 135, 50, 8, 184, 8, 49, 114, 169, 179, 28, 62, 140, 72, 110, 82, 51, 17, 250, 163, 168, 228, 89, 162, 47, 6, 127, 14, 203, 169 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2404),
                            PasswordSalt = new byte[] { 197, 234, 221, 115, 89, 43, 121, 143, 235, 29, 195, 51, 129, 113, 92, 148, 27, 240, 121, 147, 166, 236, 153, 201, 41, 59, 85, 59, 177, 61, 93, 150, 44, 12, 75, 227, 230, 13, 104, 254, 55, 238, 86, 149, 226, 145, 127, 17, 238, 197, 130, 65, 42, 204, 86, 86, 98, 220, 169, 199, 2, 106, 76, 243, 15, 34, 225, 122, 158, 79, 182, 143, 248, 102, 222, 30, 163, 156, 107, 98, 204, 245, 62, 5, 41, 110, 109, 32, 158, 204, 92, 174, 221, 55, 54, 112, 250, 60, 96, 3, 146, 12, 71, 146, 197, 217, 55, 239, 8, 1, 114, 78, 115, 36, 224, 115, 81, 163, 175, 182, 82, 99, 165, 106, 55, 187, 109, 63 },
                            Role = "Admin",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 10L,
                            Email = "paulo@exemplo.com",
                            Name = "Paulo",
                            PasswordHash = new byte[] { 212, 85, 158, 235, 116, 160, 16, 217, 92, 55, 186, 140, 197, 190, 10, 185, 224, 240, 45, 217, 96, 33, 75, 224, 176, 37, 36, 17, 102, 156, 2, 54, 186, 140, 222, 14, 103, 75, 19, 181, 171, 77, 49, 87, 107, 122, 99, 245, 144, 191, 100, 254, 154, 197, 102, 133, 2, 212, 104, 252, 197, 3, 109, 58 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2434),
                            PasswordSalt = new byte[] { 105, 218, 59, 51, 136, 178, 105, 93, 63, 17, 27, 137, 175, 90, 88, 17, 241, 129, 153, 60, 145, 47, 172, 112, 143, 84, 178, 114, 193, 96, 104, 245, 240, 180, 246, 27, 106, 218, 254, 229, 171, 176, 240, 136, 56, 85, 85, 102, 53, 174, 20, 8, 45, 16, 53, 132, 2, 154, 110, 235, 69, 38, 143, 149, 218, 213, 224, 5, 41, 119, 33, 241, 228, 191, 43, 244, 145, 70, 104, 145, 22, 56, 134, 131, 224, 80, 93, 31, 33, 186, 43, 239, 229, 92, 54, 216, 125, 3, 92, 116, 251, 156, 47, 59, 187, 186, 219, 215, 70, 228, 40, 174, 39, 211, 239, 248, 66, 130, 150, 221, 88, 162, 104, 205, 107, 154, 22, 18 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 11L,
                            Email = "rafael@exemplo.com",
                            Name = "Rafael S.",
                            PasswordHash = new byte[] { 28, 223, 248, 156, 158, 251, 242, 112, 52, 133, 229, 8, 24, 199, 187, 0, 176, 18, 149, 52, 118, 223, 110, 150, 92, 29, 169, 93, 121, 73, 162, 147, 116, 72, 118, 231, 68, 147, 122, 6, 0, 199, 61, 96, 110, 165, 91, 148, 42, 143, 51, 185, 101, 192, 143, 34, 156, 56, 181, 232, 120, 185, 158, 207 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2461),
                            PasswordSalt = new byte[] { 39, 157, 150, 140, 60, 218, 89, 116, 86, 195, 106, 185, 181, 193, 90, 179, 220, 161, 114, 17, 6, 250, 63, 220, 172, 172, 93, 181, 171, 98, 95, 179, 17, 215, 225, 192, 28, 53, 98, 14, 133, 8, 113, 149, 206, 128, 12, 228, 31, 15, 80, 147, 198, 177, 86, 128, 134, 177, 156, 14, 54, 88, 3, 79, 181, 190, 33, 230, 220, 211, 79, 4, 12, 120, 245, 241, 114, 114, 132, 75, 146, 45, 81, 89, 160, 187, 81, 205, 56, 254, 163, 111, 132, 144, 67, 64, 125, 231, 78, 115, 25, 224, 128, 32, 161, 226, 236, 208, 45, 38, 163, 3, 254, 45, 108, 8, 170, 222, 36, 138, 171, 68, 142, 186, 221, 168, 209, 9 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 12L,
                            Email = "ralf@exemplo.com",
                            Name = "Ralf",
                            PasswordHash = new byte[] { 220, 10, 249, 113, 149, 78, 32, 188, 225, 95, 185, 149, 175, 159, 109, 241, 238, 216, 112, 109, 101, 214, 241, 206, 186, 173, 166, 47, 205, 253, 214, 245, 168, 42, 128, 117, 154, 82, 30, 68, 67, 19, 77, 188, 86, 119, 9, 157, 211, 165, 151, 76, 182, 118, 3, 73, 18, 23, 213, 158, 214, 83, 35, 79 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2489),
                            PasswordSalt = new byte[] { 98, 45, 178, 174, 99, 239, 223, 245, 154, 181, 45, 155, 217, 60, 203, 157, 124, 156, 229, 154, 245, 239, 193, 181, 14, 130, 135, 198, 54, 21, 175, 42, 250, 39, 178, 213, 148, 145, 92, 254, 241, 241, 154, 248, 190, 36, 226, 139, 255, 54, 39, 230, 22, 167, 87, 103, 38, 249, 72, 46, 232, 123, 164, 201, 160, 102, 67, 15, 144, 32, 29, 189, 112, 23, 131, 55, 169, 163, 75, 87, 179, 51, 38, 66, 116, 9, 228, 235, 229, 125, 10, 67, 97, 79, 124, 1, 148, 51, 194, 251, 119, 138, 33, 162, 218, 39, 137, 146, 34, 164, 230, 132, 54, 29, 155, 123, 244, 69, 51, 130, 240, 32, 77, 236, 191, 18, 199, 77 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 13L,
                            Email = "ruan@exemplo.com",
                            Name = "Ruan",
                            PasswordHash = new byte[] { 9, 172, 212, 4, 81, 131, 60, 63, 214, 104, 112, 64, 207, 55, 40, 4, 53, 68, 27, 180, 129, 51, 155, 245, 129, 114, 112, 89, 103, 6, 250, 113, 68, 125, 192, 207, 162, 224, 142, 206, 242, 247, 106, 169, 228, 86, 104, 241, 169, 203, 231, 190, 106, 206, 140, 185, 237, 142, 27, 56, 111, 107, 213, 80 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2516),
                            PasswordSalt = new byte[] { 40, 140, 202, 109, 194, 241, 253, 74, 185, 111, 11, 203, 49, 197, 224, 14, 134, 156, 0, 166, 64, 216, 73, 229, 27, 140, 39, 246, 204, 134, 246, 248, 82, 100, 111, 157, 138, 152, 92, 104, 126, 127, 74, 63, 169, 201, 248, 90, 237, 52, 99, 112, 52, 231, 129, 195, 83, 253, 240, 195, 201, 219, 133, 161, 95, 77, 79, 21, 152, 158, 195, 227, 33, 157, 14, 170, 199, 73, 102, 138, 117, 234, 70, 253, 143, 106, 180, 66, 64, 139, 105, 166, 24, 26, 166, 251, 76, 164, 90, 235, 73, 172, 110, 227, 18, 111, 21, 222, 179, 36, 23, 236, 254, 50, 36, 76, 42, 109, 103, 35, 3, 46, 114, 70, 117, 22, 214, 61 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 14L,
                            Email = "thales@exemplo.com",
                            Name = "Thales",
                            PasswordHash = new byte[] { 42, 184, 255, 27, 164, 163, 49, 238, 158, 70, 222, 241, 211, 188, 191, 233, 52, 220, 199, 219, 22, 166, 15, 114, 67, 123, 251, 89, 33, 101, 144, 84, 99, 224, 130, 15, 60, 51, 148, 156, 117, 234, 37, 159, 89, 0, 165, 246, 55, 224, 30, 38, 255, 173, 65, 141, 179, 104, 35, 78, 44, 148, 26, 183 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2543),
                            PasswordSalt = new byte[] { 132, 86, 96, 49, 240, 218, 253, 225, 127, 79, 9, 177, 21, 203, 122, 120, 208, 73, 2, 234, 37, 51, 48, 155, 242, 216, 142, 60, 41, 64, 31, 242, 127, 14, 151, 251, 71, 171, 232, 250, 79, 109, 194, 29, 92, 216, 75, 47, 152, 133, 149, 185, 165, 18, 17, 193, 229, 54, 244, 174, 209, 35, 231, 185, 87, 163, 24, 251, 140, 163, 26, 203, 114, 121, 198, 161, 108, 64, 30, 222, 167, 152, 252, 96, 95, 23, 72, 118, 255, 113, 9, 56, 54, 142, 99, 176, 54, 87, 29, 241, 133, 155, 69, 52, 238, 21, 183, 77, 240, 245, 108, 174, 178, 172, 59, 189, 239, 218, 175, 221, 160, 195, 47, 73, 212, 29, 64, 68 },
                            Role = "User",
                            WasDeactivated = false
                        },
                        new
                        {
                            Id = 15L,
                            Email = "wait@exemplo.com",
                            Name = "Wait",
                            PasswordHash = new byte[] { 141, 233, 12, 24, 227, 163, 84, 1, 10, 58, 130, 248, 147, 129, 130, 111, 156, 187, 252, 90, 84, 78, 11, 85, 224, 116, 43, 124, 42, 72, 23, 184, 19, 209, 185, 213, 193, 105, 100, 208, 143, 103, 157, 175, 95, 44, 177, 158, 63, 242, 186, 131, 76, 184, 19, 60, 65, 38, 33, 157, 2, 1, 29, 162 },
                            PasswordLastUpdatedUtc = new DateTime(2020, 8, 16, 1, 35, 56, 607, DateTimeKind.Utc).AddTicks(2570),
                            PasswordSalt = new byte[] { 122, 130, 116, 102, 191, 39, 160, 117, 62, 8, 220, 107, 16, 74, 72, 182, 17, 238, 66, 173, 52, 203, 82, 142, 32, 63, 128, 169, 240, 40, 194, 186, 147, 82, 87, 231, 171, 10, 90, 229, 71, 213, 151, 29, 40, 119, 128, 231, 80, 163, 238, 3, 88, 142, 253, 71, 143, 30, 113, 140, 177, 100, 255, 86, 52, 37, 3, 120, 66, 219, 213, 100, 234, 209, 177, 248, 152, 131, 47, 187, 80, 68, 92, 56, 245, 163, 82, 131, 62, 117, 79, 127, 190, 34, 119, 130, 42, 195, 233, 172, 68, 154, 170, 232, 65, 218, 59, 71, 249, 138, 72, 138, 53, 142, 92, 197, 184, 203, 152, 233, 113, 145, 243, 41, 197, 149, 200, 63 },
                            Role = "User",
                            WasDeactivated = false
                        });
                });

            modelBuilder.Entity("Planner.Model.Participation", b =>
                {
                    b.HasOne("Planner.Model.Event", "Event")
                        .WithMany("EventsUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Model.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
